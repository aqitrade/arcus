/*
 * Created on 3 Feb 2016 ( Time 22:44:46 ) Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite)

package com.aqitrade.arcus.data.entity;

import java.io.Serializable;

// import javax.validation.constraints.* ;
// import org.hibernate.validator.constraints.* ;

import java.util.Date;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "portfolio_instrument"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name = "portfolio_instrument", catalog = "arcus")
// Define named queries here
@NamedQueries({@NamedQuery(name = "PortfolioInstrumentEntity.countAll",
    query = "SELECT COUNT(x) FROM PortfolioInstrumentEntity x")})
public class PortfolioInstrumentEntity implements Serializable {

  private static final long serialVersionUID = 1L;

  // ----------------------------------------------------------------------
  // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
  // ----------------------------------------------------------------------
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  @Column(name = "portfolio_instrument_id", nullable = false)
  private Long portfolioInstrumentId;


  // ----------------------------------------------------------------------
  // ENTITY DATA FIELDS
  // ----------------------------------------------------------------------
  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "create_date", nullable = false)
  private Date createDate;

  @Column(name = "avg_price", nullable = false)
  private Double avgPrice;

  @Column(name = "qty", nullable = false)
  private Double qty;

  // "instrumentId" (column "instrument_id") is not defined by itself because used as FK in a link
  // "portfolioId" (column "portfolio_id") is not defined by itself because used as FK in a link


  // ----------------------------------------------------------------------
  // ENTITY LINKS ( RELATIONSHIP )
  // ----------------------------------------------------------------------
  @Column(name = "instrument_id", nullable = false)
  private Integer instrumentId;

  @Column(name = "portfolio_id", nullable = false)
  private Integer portfolioId;


  // ----------------------------------------------------------------------
  // CONSTRUCTOR(S)
  // ----------------------------------------------------------------------
  public PortfolioInstrumentEntity() {
    super();
  }

  // ----------------------------------------------------------------------
  // GETTER & SETTER FOR THE KEY FIELD
  // ----------------------------------------------------------------------
  public void setPortfolioInstrumentId(Long portfolioInstrumentId) {
    this.portfolioInstrumentId = portfolioInstrumentId;
  }

  public Long getPortfolioInstrumentId() {
    return this.portfolioInstrumentId;
  }

  // ----------------------------------------------------------------------
  // GETTERS & SETTERS FOR FIELDS
  // ----------------------------------------------------------------------
  // --- DATABASE MAPPING : create_date ( TIMESTAMP )
  public void setCreateDate(Date createDate) {
    this.createDate = createDate;
  }

  public Date getCreateDate() {
    return this.createDate;
  }

  // --- DATABASE MAPPING : avg_price ( DOUBLE )
  public void setAvgPrice(Double avgPrice) {
    this.avgPrice = avgPrice;
  }

  public Double getAvgPrice() {
    return this.avgPrice;
  }

  // --- DATABASE MAPPING : qty ( DOUBLE )
  public void setQty(Double qty) {
    this.qty = qty;
  }

  public Double getQty() {
    return this.qty;
  }

  /**
   * @return the instrumentId
   */
  public Integer getInstrumentId() {
    return instrumentId;
  }

  /**
   * @param instrumentId the instrumentId to set
   */
  public void setInstrumentId(Integer instrumentId) {
    this.instrumentId = instrumentId;
  }

  /**
   * @return the portfolioId
   */
  public Integer getPortfolioId() {
    return portfolioId;
  }

  /**
   * @param portfolioId the portfolioId to set
   */
  public void setPortfolioId(Integer portfolioId) {
    this.portfolioId = portfolioId;
  }




}
